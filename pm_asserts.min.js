function isJsonResponse(){pm.test("Response should have JSON Body",function(){pm.response.to.have.jsonBody()})}function isResponseStatus(statusCode){pm.test("Status code is "+statusCode,function(){pm.response.to.have.status(statusCode)})}function validateJsonSchema(schema){tests["Response Data is Valid"]=tv4.validate(pm.response.json(),schema),null!==tv4.error&&(tests["Validation ERROR => "+tv4.error.message]="")}function isEquals(expected,actual,message){message=message||"Expected value is Equals to actual",pm.test(message,function(){pm.expect(expected).to.eql(actual)})}function isRawResponseBodyContains(needle,message){message=message||"Raw Response Body contains "+needle,pm.test(message,function(){pm.expect(pm.response.text()).to.include(needle)})}function ensureEnv(localVar,jsonValue){pm.environment.unset(localVar),pm.environment.set(localVar,jsonValue);var envValue=pm.environment.get(localVar),message="Variable is set to ENV: "+localVar+" = "+envValue;pm.test(message,function(){pm.expect(jsonValue).to.eql(envValue)})}function nextRequest(requestName){postman.setNextRequest(requestName)}